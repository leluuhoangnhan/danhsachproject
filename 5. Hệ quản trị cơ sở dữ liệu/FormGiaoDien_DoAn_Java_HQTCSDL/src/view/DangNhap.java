/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.naming.spi.DirStateFactory.Result;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author LeLuuHoangNhan
 */
public class DangNhap extends javax.swing.JFrame {
    private Connection conn;
    
    public DangNhap() throws ClassNotFoundException, SQLException {
        initComponents();
        this.setVisible(true);
        
        try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            conn=DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databasename=DB_QLDA;"
                    + "username=sa;password=1321");
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txt_dangnhap = new javax.swing.JTextField();
        txt_password = new javax.swing.JPasswordField();
        but_dangnhap = new javax.swing.JButton();
        but_reset = new javax.swing.JButton();
        but_dangky = new javax.swing.JButton();
        but_exit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setText("Đăng Nhập/ Đăng Ký");

        jLabel2.setText("Tên đăng nhập :");

        jLabel3.setText("Mật khẩu :");

        txt_dangnhap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_dangnhapActionPerformed(evt);
            }
        });

        txt_password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_passwordActionPerformed(evt);
            }
        });

        but_dangnhap.setText("Đăng nhập");
        but_dangnhap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_dangnhapActionPerformed(evt);
            }
        });

        but_reset.setText("Reset");
        but_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_resetActionPerformed(evt);
            }
        });

        but_dangky.setText("Đăng ký");
        but_dangky.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_dangkyActionPerformed(evt);
            }
        });

        but_exit.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        but_exit.setText("Exit");
        but_exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                but_exitMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(102, 102, 102)
                                .addComponent(but_dangnhap)
                                .addGap(27, 27, 27)
                                .addComponent(but_dangky, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(166, 166, 166)
                                .addComponent(but_reset))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addGap(34, 34, 34))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addGap(53, 53, 53)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txt_dangnhap, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                                            .addComponent(txt_password))))))
                        .addGap(0, 49, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(but_exit)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(txt_dangnhap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txt_password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(but_dangnhap)
                    .addComponent(but_dangky))
                .addGap(18, 18, 18)
                .addComponent(but_reset)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(but_exit)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void txt_passwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_passwordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_passwordActionPerformed

    private void txt_dangnhapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_dangnhapActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_dangnhapActionPerformed

    private void but_dangnhapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_dangnhapActionPerformed
   
        String user=txt_dangnhap.getText().toString();
        String pass=txt_password.getText().toString();
        if(user.equals("") || pass.equals(""))
        {
            JOptionPane.showMessageDialog(this,"Không được bỏ trống các mục");
        }
        else
        { 
            int i=0,j=0;
            String sql="SELECT * FROM TAIKHOAN";
            try{
                PreparedStatement ps=conn.prepareStatement(sql);
                ResultSet rs=ps.executeQuery();
                while(rs.next())
                {
                    //Kiểm tra tài khoản có tồn tại chưa
                    if(user.equals(rs.getString("TEN")))
                    {
                        j++;
                    }
                    //Kiểm tra tài khoản và pass có chính xác không
                    if(user.equals(rs.getString("TEN")) && pass.equals(rs.getString("PASS")))
                    {
                        i++;
                    }
                }
                rs.close();
                ps.close();
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Erro lỗi kiểm tra tài khoản đăng nhập !");
                e.printStackTrace();   
            }
            if(i!=0)
            {
                this.setVisible(false);
                ChonLua cl=new ChonLua();
                cl.setVisible(true);
                JOptionPane.showMessageDialog(this, "Chúc mừng bạn đã đăng nhập thành công!");
                
                //------Nếu đăng nhập thành công =>> Ghi dữ liệu user, pass xuống [SAVE_DANGNHAP]
                DefaultListModel ds=new DefaultListModel();
                String sql3="SELECT LOAI FROM TAIKHOAN WHERE TEN=?";
                try
                {
                    PreparedStatement ps3=conn.prepareStatement(sql3);
                    ps3.setString(1, user);
                    ResultSet rs3=ps3.executeQuery();
                    while(rs3.next())
                    {
                        ds.addElement(rs3.getString(1));
                    }
                    rs3.close();
                    ps3.close();
                    
                    
                    int k=ds.size();
                    while(k!=0)
                    {
                        String sql2="DELETE FROM SAVE_DANGNHAP";
                        try{
                            PreparedStatement ps2=conn.prepareStatement(sql2);
                            ps2.executeUpdate();
                            ps2.close();

                            String sql1="INSERT INTO SAVE_DANGNHAP VALUES(?,?,?)";
                            try{
                                PreparedStatement ps1=conn.prepareStatement(sql1);
                                ps1.setString(1,user);
                                ps1.setString(2,pass);
                                ps1.setString(3,ds.getElementAt(k-1).toString());
                                ps1.executeUpdate();
                                ps1.close();
                                JOptionPane.showMessageDialog(this, "Đã lưu thông tin đăng nhập!");
                            }
                            catch(Exception ex)
                            {
                                JOptionPane.showMessageDialog(this, "Lưu thông tin đăng nhập không thành công!");
                                ex.printStackTrace();
                            }

                        }
                        catch(Exception ex)
                        {
                            JOptionPane.showMessageDialog(this, "Clear Save_DangNhap không thành công!");
                            ex.printStackTrace();
                        }
                        k--;
                        
                    }
                    
                }
                catch(Exception ex)
                {
                    JOptionPane.showMessageDialog(this, "Erro save_DangNhap (3)!");
                }
                

                //-----------------

            }
            else if(j!=0)
            {
                JOptionPane.showMessageDialog(this, "Đăng nhập thất bại. Tài khoản hoặc mật khẩu không chính xác!");
            }
            else{
                JOptionPane.showMessageDialog(this, "Đăng nhập thất bại. Tài khoản chưa được đăng ký!");
            }
        }

    }//GEN-LAST:event_but_dangnhapActionPerformed

    private void but_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_resetActionPerformed
        txt_dangnhap.setText("");
        txt_password.setText("");
    }//GEN-LAST:event_but_resetActionPerformed

    private void but_exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_but_exitMouseClicked
        JFrame f=new JFrame("Exit");
        if(JOptionPane.showConfirmDialog(f, "Bạn có muốn thoát chương trình ?", "Thông báo", JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION)
            System.exit(0);
    }//GEN-LAST:event_but_exitMouseClicked

    private void but_dangkyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_dangkyActionPerformed
        String user=txt_dangnhap.getText().toString();
        String pass=txt_password.getText().toString();
        if(user.equals("") || pass.equals(""))
        {
            JOptionPane.showMessageDialog(this,"Không được bỏ trống các mục");
        }
        else
        {
            //Kiểm tra tài khoản đăng ký đã tồn tại chưa
            int i=0;
            String sql1="SELECT * FROM TAIKHOAN WHERE TEN=?";
            try
            {
                PreparedStatement ps1=conn.prepareStatement(sql1);
                ps1.setString(1,user);
                ResultSet rs1=ps1.executeQuery();
                while(rs1.next())
                {
                    i++;
                }
                rs1.close();
                ps1.close();
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(this, "Lỗi kiểm tra tài khoản đăng ký có tồn tại chưa!");
                ex.printStackTrace();
            }

            if(i==0)
            {
                int taoLogin=taoLogin(user,pass);
                if(taoLogin!=0)
                {
                    int taoUser=taoUser(user,user);
                    if(taoUser!=0)
                    {
                        int addNhom=themThanhVienNhom("Thong_thuong",user);
                        if(addNhom!=0)
                        {
                            String sql="INSERT INTO TAIKHOAN(TEN,PASS,LOAI) "
                                    + "VALUES(?,?,?)";
                            try{
                                PreparedStatement ps=conn.prepareStatement(sql);
                                ps.setString(1,user);
                                ps.setString(2,pass);
                                ps.setString(3,"Thong_thuong");

                                ps.executeUpdate();
                                ps.close();


                                JOptionPane.showMessageDialog(this, "Đăng ký thành công !");

                            }
                            catch(Exception e)
                            {
                                e.printStackTrace();
                                JOptionPane.showMessageDialog(this, "Đăng ký thất bại!");
                            }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "Lỗi thêm thành viên vào nhóm!");
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this, "Lỗi tạo user!");
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "Lỗi tạo login!");
                }
                
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Tài khoản đăng ký đã tồn tại");
            }
        }
    }//GEN-LAST:event_but_dangkyActionPerformed

    public int taoLogin(String user,String pass)
    {
        if(user.equals("") || pass.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Lỗi tạo login do thiếu user || pass!");
            return 0;
        }
        else
        {
            String sql="sp_addlogin ?, ?";
            try
            {
                PreparedStatement ps=conn.prepareStatement(sql);
                ps.setString(1, user);
                ps.setString(2, pass);
                ps.execute();
                ps.close();
                
                return 1;
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(this, "Lỗi tạo login (1)!");
                ex.printStackTrace();
                return 0;
            }
        }
    }
    
    public int taoUser(String user,String tenNguoiDung)
    {
        if(user.equals("") || tenNguoiDung.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Lỗi tạo user do thiếu user || tenNguoiDung!");
            return 0;
        }
        else
        {
            String sql="sp_adduser ?, ?";
            try
            {
                PreparedStatement ps=conn.prepareStatement(sql);
                ps.setString(1, user);
                ps.setString(2, tenNguoiDung);
                ps.execute();
                ps.close();
                
                return 1;
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(this, "Lỗi tạo User (1)!");
                ex.printStackTrace();
                return 0;
            }
        }
    }
    
    public int themThanhVienNhom(String tenNhom, String thanhVien)
    {
        if(tenNhom.equals("") || thanhVien.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Lỗi thêm thành viên vào nhóm =>> Tên nhóm || tên người dùng rỗng!");
            return 0;
        }
        else
        {
            String sql="sp_addrolemember ?, ?";
            try
            {
                PreparedStatement ps=conn.prepareStatement(sql);
                ps.setString(1, tenNhom);
                ps.setString(2, thanhVien);
                ps.execute();
                ps.close();
                
                return 1;   
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(this, "Lỗi thêm thành viên vào nhóm(1)!");
                ex.printStackTrace();
                return 0;
            }
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DangNhap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DangNhap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DangNhap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DangNhap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new DangNhap().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(DangNhap.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(DangNhap.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton but_dangky;
    private javax.swing.JButton but_dangnhap;
    private javax.swing.JButton but_exit;
    private javax.swing.JButton but_reset;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField txt_dangnhap;
    private javax.swing.JPasswordField txt_password;
    // End of variables declaration//GEN-END:variables
}
